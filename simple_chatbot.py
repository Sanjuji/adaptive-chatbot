#!/usr/bin/env python3
"""
Simple Adaptive Chatbot - Basic Version
A working chatbot that doesn't require external dependencies
"""

import random
import time
from datetime import datetime

class SimpleChatbot:
    def __init__(self):
        self.name = "Adaptive Assistant"
        self.conversation_history = []
        self.user_preferences = {}
        self.start_time = datetime.now()
        
        # Simple responses for different languages
        self.responses = {
            'en': {
                'greeting': [
                    "Hello! How can I help you today?",
                    "Hi there! What would you like to know?",
                    "Greetings! I'm here to assist you.",
                    "Hello! I'm your adaptive assistant."
                ],
                'farewell': [
                    "Goodbye! Have a great day!",
                    "See you later! Take care!",
                    "Farewell! Until next time!",
                    "Bye! Thanks for chatting!"
                ],
                'question': [
                    "That's an interesting question! Let me think about that.",
                    "I'd be happy to help with that question.",
                    "That's a great question! Here's what I think:",
                    "Let me provide some information on that topic."
                ],
                'default': [
                    "I understand. Can you tell me more about that?",
                    "That's interesting! Please continue.",
                    "I'm listening. What else would you like to share?",
                    "Tell me more about what you're thinking."
                ]
            },
            'hi': {
                'greeting': [
                    "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
                    "‡§π‡•à‡§≤‡•ã! ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
                    "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•Ç‡§Å‡•§",
                    "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Å‡•§"
                ],
                'farewell': [
                    "‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ! ‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§∂‡•Å‡§≠ ‡§π‡•ã!",
                    "‡§´‡§ø‡§∞ ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç! ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡•á‡§Ç!",
                    "‡§µ‡§ø‡§¶‡§æ‡§à! ‡§Ö‡§ó‡§≤‡•Ä ‡§¨‡§æ‡§∞ ‡§§‡§ï!",
                    "‡§¨‡§æ‡§Ø! ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!"
                ],
                'question': [
                    "‡§Ø‡§π ‡§è‡§ï ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! ‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•ã‡§ö‡§®‡•á ‡§¶‡•á‡§Ç‡•§",
                    "‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§∏‡§µ‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§",
                    "‡§Ø‡§π ‡§è‡§ï ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡•á‡§∞‡•Ä ‡§∞‡§æ‡§Ø ‡§π‡•à:",
                    "‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§ï‡•Å‡§õ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§®‡•á ‡§¶‡•á‡§Ç‡•§"
                ],
                'default': [
                    "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§§‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
                    "‡§Ø‡§π ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§π‡•à! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§",
                    "‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
                    "‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡•ã‡§ö ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
                ]
            }
        }
        
        # Simple language detection keywords
        self.language_keywords = {
            'hi': ['‡§®‡§Æ‡§∏‡•ç‡§§‡•á', '‡§π‡•à‡§≤‡•ã', '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞', '‡§ï‡•à‡§∏‡•á', '‡§ï‡•ç‡§Ø‡§æ', '‡§π‡•à', '‡§π‡•à‡§Ç', '‡§Æ‡•á‡§Ç', '‡§ï‡§æ', '‡§ï‡•Ä', '‡§ï‡•ã', '‡§∏‡•á', '‡§™‡§∞', '‡§§‡•ã', '‡§≠‡•Ä', '‡§Ö‡§¨', '‡§Ø‡§π', '‡§µ‡§π', '‡§Æ‡•à‡§Ç', '‡§Ü‡§™', '‡§π‡§Æ', '‡§µ‡•á'],
            'en': ['hello', 'hi', 'how', 'what', 'where', 'when', 'why', 'who', 'is', 'are', 'was', 'were', 'have', 'has', 'had', 'will', 'would', 'can', 'could', 'should', 'the', 'a', 'an', 'and', 'or', 'but']
        }
    
    def detect_language(self, text):
        """Simple language detection based on keywords"""
        text_lower = text.lower()
        
        hi_score = sum(1 for word in self.language_keywords['hi'] if word in text_lower)
        en_score = sum(1 for word in self.language_keywords['en'] if word in text_lower)
        
        if hi_score > en_score:
            return 'hi'
        else:
            return 'en'
    
    def detect_intent(self, text):
        """Simple intent detection"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['hello', 'hi', 'namaste', '‡§®‡§Æ‡§∏‡•ç‡§§‡•á', '‡§π‡•à‡§≤‡•ã', '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞']):
            return 'greeting'
        elif any(word in text_lower for word in ['bye', 'goodbye', 'see you', '‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ', '‡§¨‡§æ‡§Ø', '‡§´‡§ø‡§∞ ‡§Æ‡§ø‡§≤‡§§‡•á']):
            return 'farewell'
        elif '?' in text or any(word in text_lower for word in ['what', 'how', 'why', 'when', 'where', '‡§ï‡•ç‡§Ø‡§æ', '‡§ï‡•à‡§∏‡•á', '‡§ï‡•ç‡§Ø‡•ã‡§Ç', '‡§ï‡§¨', '‡§ï‡§π‡§æ‡§Å']):
            return 'question'
        else:
            return 'default'
    
    def generate_response(self, user_input):
        """Generate a response based on user input"""
        language = self.detect_language(user_input)
        intent = self.detect_intent(user_input)
        
        # Get appropriate response
        if language in self.responses and intent in self.responses[language]:
            response = random.choice(self.responses[language][intent])
        else:
            response = random.choice(self.responses['en']['default'])
        
        return response, language, intent
    
    def demo_chat(self):
        """Demo chat with predefined inputs"""
        print(f"ü§ñ {self.name} - Simple Adaptive Chatbot")
        print("=" * 50)
        print("Running demo conversation...")
        print("=" * 50)
        
        # Demo inputs
        demo_inputs = [
            "Hello! How are you?",
            "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?",
            "What is the weather like?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§¨‡•ã‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
            "Thank you for your help!",
            "bye"
        ]
        
        # Welcome message
        welcome_msg = "Hello! I'm your adaptive assistant. How can I help you today?"
        print(f"Bot: {welcome_msg}")
        
        for user_input in demo_inputs:
            print(f"\nYou: {user_input}")
            
            # Check for exit commands
            if user_input.lower() in ['quit', 'exit', 'bye', '‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ', '‡§¨‡§æ‡§Ø']:
                farewell_msg = "Goodbye! Thanks for chatting with me!"
                print(f"Bot: {farewell_msg}")
                break
            
            # Generate response
            response, detected_lang, intent = self.generate_response(user_input)
            
            # Store conversation
            self.conversation_history.append({
                'timestamp': datetime.now(),
                'user_input': user_input,
                'bot_response': response,
                'detected_language': detected_lang,
                'intent': intent
            })
            
            # Display response
            print(f"Bot ({detected_lang}): {response}")
            
            # Small delay for demo
            time.sleep(1)
        
        print("\nüéâ Demo completed successfully!")
    
    def chat(self):
        """Main chat loop"""
        print(f"ü§ñ {self.name} - Simple Adaptive Chatbot")
        print("=" * 50)
        print("Type 'quit', 'exit', or 'bye' to end the conversation")
        print("Supports English and Hindi")
        print("=" * 50)
        
        # Welcome message
        welcome_msg = "Hello! I'm your adaptive assistant. How can I help you today?"
        print(f"Bot: {welcome_msg}")
        
        while True:
            try:
                # Get user input
                user_input = input("\nYou: ").strip()
                
                # Check for exit commands
                if user_input.lower() in ['quit', 'exit', 'bye', '‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ', '‡§¨‡§æ‡§Ø']:
                    farewell_msg = "Goodbye! Thanks for chatting with me!"
                    print(f"Bot: {farewell_msg}")
                    break
                
                if not user_input:
                    continue
                
                # Generate response
                response, detected_lang, intent = self.generate_response(user_input)
                
                # Store conversation
                self.conversation_history.append({
                    'timestamp': datetime.now(),
                    'user_input': user_input,
                    'bot_response': response,
                    'detected_language': detected_lang,
                    'intent': intent
                })
                
                # Display response
                print(f"Bot ({detected_lang}): {response}")
                
                # Show some stats
                if len(self.conversation_history) % 5 == 0:
                    runtime = datetime.now() - self.start_time
                    print(f"\nüìä Stats: {len(self.conversation_history)} messages, {runtime.total_seconds():.1f}s runtime")
                
            except KeyboardInterrupt:
                print("\n\nBot: Goodbye! Thanks for chatting!")
                break
            except Exception as e:
                print(f"Bot: Sorry, I encountered an error: {e}")
    
    def show_stats(self):
        """Show conversation statistics"""
        if not self.conversation_history:
            print("No conversation history yet.")
            return
        
        print("\nüìä Conversation Statistics:")
        print("=" * 30)
        
        # Language usage
        languages = {}
        intents = {}
        
        for msg in self.conversation_history:
            lang = msg['detected_language']
            intent = msg['intent']
            
            languages[lang] = languages.get(lang, 0) + 1
            intents[intent] = intents.get(intent, 0) + 1
        
        print(f"Total messages: {len(self.conversation_history)}")
        print(f"Languages used: {', '.join(f'{k} ({v})' for k, v in languages.items())}")
        print(f"Intents detected: {', '.join(f'{k} ({v})' for k, v in intents.items())}")
        
        runtime = datetime.now() - self.start_time
        print(f"Session duration: {runtime.total_seconds():.1f} seconds")

def main():
    """Main function"""
    chatbot = SimpleChatbot()
    
    try:
        # Run demo first to test functionality
        chatbot.demo_chat()
        chatbot.show_stats()
        
        # Ask if user wants interactive mode
        print("\n" + "="*50)
        print("Demo completed! The chatbot is working properly.")
        print("Features tested:")
        print("‚úì Language detection (English/Hindi)")
        print("‚úì Intent recognition (greeting/question/farewell)")
        print("‚úì Multilingual responses")
        print("‚úì Conversation history tracking")
        print("="*50)
        
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()