#!/usr/bin/env python3
"""
üöÄ AI-Powered Adaptive Chatbot Launcher
Final integrated system with all advanced features
"""

import sys
import os
import argparse
import time
from datetime import datetime

def print_banner():
    """Print startup banner"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                                        ‚ïë
    ‚ïë    ü§ñ AI-POWERED ADAPTIVE CHATBOT 2.0                                 ‚ïë 
    ‚ïë                                                                        ‚ïë
    ‚ïë    üß† Advanced NLP & Multilingual Intelligence                        ‚ïë
    ‚ïë    üîå Specialized Electrical Business Domain                          ‚ïë
    ‚ïë    üó£Ô∏è Voice-Enabled Conversation System                              ‚ïë
    ‚ïë    üìö Intelligent Learning & Knowledge Management                     ‚ïë
    ‚ïë                                                                        ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)
    
def check_dependencies():
    """Check and report system dependencies"""
    print("üîç Checking system dependencies...")
    
    dependencies = {
        "Core Systems": ["config", "logger", "validators"],
        "Voice Interface": ["simple_voice", "edge_tts", "speech_recognition", "pygame"],
        "Learning System": ["unified_learning_manager"],
        "Advanced NLP": ["advanced_nlp", "transformers", "torch", "langdetect", "textblob"],
        "Business Logic": ["electrical_business_enhancer", "nlp_integration"],
        "Integration": ["intelligent_integration_bridge"]
    }
    
    missing_deps = []
    available_systems = []
    
    for category, deps in dependencies.items():
        category_available = True
        for dep in deps:
            try:
                __import__(dep)
            except ImportError:
                missing_deps.append(f"{category}: {dep}")
                category_available = False
        
        if category_available:
            available_systems.append(category)
            print(f"  ‚úÖ {category}")
        else:
            print(f"  ‚ö†Ô∏è {category} (partial)")
    
    return missing_deps, available_systems

def show_system_info():
    """Show system information"""
    print("\nüìä SYSTEM INFORMATION:")
    print(f"  üïí Launch Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"  üêç Python Version: {sys.version.split()[0]}")
    print(f"  üíæ Platform: {sys.platform}")
    print(f"  üìÇ Working Directory: {os.getcwd()}")

def launch_intelligent_bridge():
    """Launch the intelligent integration bridge"""
    try:
        print("\nüß† Launching Intelligent Integration Bridge...")
        from intelligent_integration_bridge import get_intelligent_bridge
        
        bridge = get_intelligent_bridge()
        print("‚úÖ Intelligent Bridge initialized successfully!")
        
        return bridge
        
    except ImportError as e:
        print(f"‚ùå Failed to import intelligent bridge: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Failed to initialize intelligent bridge: {e}")
        return None

def launch_enhanced_chatbot():
    """Launch the enhanced chatbot interface"""
    try:
        print("\nü§ñ Launching Enhanced Chatbot Interface...")
        from adaptive_chatbot_enhanced import EnhancedAdaptiveChatbot
        
        chatbot = EnhancedAdaptiveChatbot()
        print("‚úÖ Enhanced Chatbot initialized successfully!")
        
        return chatbot
        
    except ImportError as e:
        print(f"‚ùå Failed to import enhanced chatbot: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Failed to initialize enhanced chatbot: {e}")
        return None

def run_quick_test(bridge=None):
    """Run a quick system test"""
    if not bridge:
        print("‚ö†Ô∏è Skipping quick test (no bridge available)")
        return
    
    print("\nüß™ Running Quick System Test...")
    
    test_queries = [
        "Hello!",
        "Switch ka price kya hai?",
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á",
        "Thank you!"
    ]
    
    success_count = 0
    
    for query in test_queries:
        try:
            result = bridge.process_intelligent_query(query)
            if result.get("success"):
                success_count += 1
                print(f"  ‚úÖ '{query}' -> Success")
            else:
                print(f"  ‚ùå '{query}' -> Failed")
        except Exception as e:
            print(f"  ‚ùå '{query}' -> Error: {e}")
    
    print(f"\nüìä Test Results: {success_count}/{len(test_queries)} passed")
    
    if success_count == len(test_queries):
        print("üéâ All systems operational!")
    else:
        print("‚ö†Ô∏è Some systems may have issues")

def show_feature_summary():
    """Show available features"""
    features = {
        "üåç Multilingual Support": [
            "Language detection for 50+ languages",
            "Mixed language handling (Hinglish, etc.)",
            "Cultural context awareness",
            "Automatic voice selection"
        ],
        
        "üß† Advanced AI Capabilities": [
            "Intent recognition & classification",
            "Sentiment analysis with confidence scoring", 
            "Context-aware conversation memory",
            "Transformer-based response generation"
        ],
        
        "üîå Electrical Business Intelligence": [
            "Product identification & categorization",
            "Price inquiry handling",
            "Installation & service requests",
            "Technical specification queries"
        ],
        
        "üó£Ô∏è Voice Interface": [
            "EdgeTTS high-quality speech synthesis",
            "Speech recognition with multiple engines",
            "Language-appropriate voice selection",
            "Conversation flow management"
        ],
        
        "üìö Learning & Knowledge": [
            "Dynamic knowledge acquisition",
            "Fuzzy matching for query variations",
            "Usage-based optimization",
            "Backup & recovery systems"
        ],
        
        "‚öôÔ∏è System Integration": [
            "Intelligent response prioritization",
            "Multiple knowledge source fusion",
            "Performance monitoring",
            "Comprehensive error handling"
        ]
    }
    
    print("\nüéØ AVAILABLE FEATURES:")
    for category, feature_list in features.items():
        print(f"\n{category}:")
        for feature in feature_list:
            print(f"  ‚Ä¢ {feature}")

def interactive_mode(chatbot=None, bridge=None):
    """Run interactive mode"""
    print("\nüéÆ INTERACTIVE MODE")
    print("=" * 50)
    
    if chatbot:
        print("ü§ñ Enhanced Chatbot Interface Available")
        chatbot.run_interactive_menu()
    elif bridge:
        print("üß† Using Intelligent Bridge Interface")
        
        print("üí¨ Type your messages (type 'exit' to quit):")
        while True:
            try:
                user_input = input("\nüë§ You: ").strip()
                
                if user_input.lower() in ['exit', 'quit', 'bye']:
                    print("ü§ñ Goodbye! Thanks for chatting!")
                    break
                
                if not user_input:
                    continue
                
                # Process with intelligent bridge
                result = bridge.process_intelligent_query(user_input)
                print(f"ü§ñ AI: {result['response_text']}")
                
                # Show analysis (optional)
                if result.get('confidence', 0) > 0.8:
                    print(f"   üíØ High confidence response")
                
            except KeyboardInterrupt:
                print("\nü§ñ Chat interrupted. Goodbye!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
    else:
        print("‚ùå No chatbot interface available")

def demo_mode(bridge=None):
    """Run demonstration mode"""
    if not bridge:
        print("‚ùå Demo mode requires intelligent bridge")
        return
    
    print("\nüé≠ DEMO MODE")
    print("=" * 40)
    
    print("üåç Multilingual Conversation Demo:")
    
    demo_conversations = [
        ("English", "Hello! What electrical items do you have?"),
        ("Hindi", "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! Switch ‡§ï‡§æ price ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"),
        ("Mixed", "Wire kitne ka milta hai bhai?"),
        ("Business", "Do you provide installation service?"),
        ("Technical", "What MCB rating do I need?"),
        ("Appreciation", "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ for your help!"),
    ]
    
    for lang_type, query in demo_conversations:
        print(f"\nüó£Ô∏è {lang_type}: {query}")
        
        try:
            result = bridge.process_intelligent_query(query)
            
            print(f"ü§ñ Response: {result['response_text']}")
            print(f"üìä Analysis: {result['confidence']:.2f} confidence | "
                  f"{result['response_type']} | {result['processing_time']}s")
            
            # Show electrical context if available
            electrical = result.get('analysis', {}).get('electrical', {})
            if electrical.get('identified_products'):
                products = [p['product'] for p in electrical['identified_products']]
                print(f"üîå Products: {', '.join(products)}")
                
        except Exception as e:
            print(f"‚ùå Demo error: {e}")
        
        time.sleep(1)  # Brief pause between demos
    
    # Show final statistics
    print(f"\nüìä DEMO STATISTICS:")
    try:
        stats = bridge.get_intelligent_statistics()
        interaction_stats = stats.get('interaction_stats', {})
        print(f"‚Ä¢ Conversations: {interaction_stats.get('total_interactions', 0)}")
        print(f"‚Ä¢ Success Rate: {interaction_stats.get('success_rate', 0):.1f}%")
        print(f"‚Ä¢ Electrical Queries: {interaction_stats.get('electrical_queries', 0)}")
    except Exception as e:
        print(f"Stats unavailable: {e}")

def main():
    """Main launcher function"""
    parser = argparse.ArgumentParser(description='AI-Powered Adaptive Chatbot Launcher')
    parser.add_argument('--mode', choices=['interactive', 'demo', 'test', 'info'], 
                       default='interactive', help='Launch mode')
    parser.add_argument('--skip-test', action='store_true', help='Skip system test')
    parser.add_argument('--minimal', action='store_true', help='Minimal output mode')
    
    args = parser.parse_args()
    
    try:
        # Print banner
        if not args.minimal:
            print_banner()
            show_system_info()
        
        # Check dependencies
        missing_deps, available_systems = check_dependencies()
        
        if missing_deps and not args.minimal:
            print(f"\n‚ö†Ô∏è Missing dependencies:")
            for dep in missing_deps[:5]:  # Show first 5
                print(f"  ‚Ä¢ {dep}")
            if len(missing_deps) > 5:
                print(f"  ... and {len(missing_deps) - 5} more")
        
        print(f"\n‚úÖ Available Systems: {len(available_systems)}")
        
        # Initialize systems
        bridge = launch_intelligent_bridge()
        chatbot = launch_enhanced_chatbot()
        
        if not bridge and not chatbot:
            print("‚ùå Failed to initialize any chatbot system")
            sys.exit(1)
        
        # Run system test
        if not args.skip_test and bridge:
            run_quick_test(bridge)
        
        # Show features
        if args.mode == 'info':
            show_feature_summary()
            return
        
        # Run selected mode
        if args.mode == 'interactive':
            interactive_mode(chatbot, bridge)
        elif args.mode == 'demo':
            demo_mode(bridge)
        elif args.mode == 'test':
            run_quick_test(bridge)
            if bridge:
                stats = bridge.get_intelligent_statistics()
                print(f"\nüìä System Stats: {stats}")
        
        print(f"\n‚úÖ AI Chatbot session completed successfully!")
        
    except KeyboardInterrupt:
        print(f"\nüëã Goodbye! Session terminated by user.")
    except Exception as e:
        print(f"‚ùå Launcher error: {e}")
        sys.exit(1)
    finally:
        print(f"üïí Session ended: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()